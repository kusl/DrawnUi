# ==============================================================================
# FILE: .github/workflows/pr-validation.yml
# ==============================================================================
---
name: PR Validation

on:
  pull_request:
    branches: [ main, dev, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'src/Breakout.csproj'

jobs:
  validate-android:
    name: Validate Android Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '17'
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI workloads
      run: |
        dotnet nuget locals all --clear
        dotnet workload install maui android
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build Android (Debug - Fast validation)
      run: |
        dotnet build ${{ env.PROJECT_PATH }} `
          -c Debug `
          -f net9.0-android `
          --no-restore `
          --verbosity normal

  validate-ios:
    name: Validate iOS Build
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI workloads
      run: |
        dotnet nuget locals all --clear
        dotnet workload install maui ios
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build iOS (Debug - Fast validation)
      run: |
        dotnet build ${{ env.PROJECT_PATH }} \
          -c Debug \
          -f net9.0-ios \
          --no-restore \
          --verbosity normal

  validate-windows:
    name: Validate Windows Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI workloads
      run: |
        dotnet nuget locals all --clear
        dotnet workload install maui windows
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build Windows (Debug - Fast validation)
      run: |
        dotnet build ${{ env.PROJECT_PATH }} `
          -c Debug `
          -f net9.0-windows10.0.19041.0 `
          --no-restore `
          --verbosity normal

  code-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run static analysis
      shell: pwsh
      run: |
        Write-Host "=== Code Quality Analysis ===" -ForegroundColor Cyan
        
        # Check for common issues
        Write-Host "`nChecking for TODO/FIXME comments..." -ForegroundColor Yellow
        $todos = Select-String -Path "src\**\*.cs" -Pattern "TODO|FIXME|HACK" -Recurse
        if ($todos) { 
          Write-Host "Found items to review:" -ForegroundColor Yellow
          $todos | ForEach-Object { Write-Host "  $($_.Filename):$($_.LineNumber) - $($_.Line.Trim())" }
        } else { 
          Write-Host "✅ No TODO/FIXME/HACK comments found" -ForegroundColor Green 
        }
        
        # Check project file integrity
        Write-Host "`nValidating solution structure..." -ForegroundColor Yellow
        dotnet sln list
        
        # Check for large files
        Write-Host "`nChecking for large files..." -ForegroundColor Yellow
        $largeFiles = Get-ChildItem -Path "src" -Recurse -File | Where-Object { $_.Length -gt 1MB }
        if ($largeFiles) {
          Write-Host "Large files found:" -ForegroundColor Yellow
          $largeFiles | ForEach-Object { Write-Host "  $($_.FullName) - $([math]::Round($_.Length/1MB, 2))MB" }
        } else {
          Write-Host "✅ No large files found" -ForegroundColor Green
        }
        
        # Check for duplicate files
        Write-Host "`nChecking for potential duplicate code..." -ForegroundColor Yellow
        $csFiles = Get-ChildItem -Path "src" -Filter "*.cs" -Recurse
        $fileHashes = $csFiles | Group-Object { (Get-FileHash $_.FullName).Hash } | Where-Object { $_.Count -gt 1 }
        if ($fileHashes) {
          Write-Host "Potential duplicate files found:" -ForegroundColor Yellow
          $fileHashes | ForEach-Object { 
            Write-Host "  Hash: $($_.Name)"
            $_.Group | ForEach-Object { Write-Host "    $($_.FullName)" }
          }
        } else {
          Write-Host "✅ No duplicate files found" -ForegroundColor Green
        }

  generate-summary:
    name: Generate Summary
    needs: [validate-android, validate-ios, validate-windows, code-analysis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## 🎮 Breakout Game - PR Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        if [ "${{ needs.validate-android.result }}" == "success" ]; then
          echo "- ✅ **Android Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Android Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.validate-ios.result }}" == "success" ]; then
          echo "- ✅ **iOS Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **iOS Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.validate-windows.result }}" == "success" ]; then
          echo "- ✅ **Windows Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Windows Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-analysis.result }}" == "success" ]; then
          echo "- ✅ **Code Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Code Analysis**: Issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- All platforms validated for compilation" >> $GITHUB_STEP_SUMMARY
        echo "- Ready for merge if all checks pass" >> $GITHUB_STEP_SUMMARY
        echo "- Full release build will run on main branch" >> $GITHUB_STEP_SUMMARY
